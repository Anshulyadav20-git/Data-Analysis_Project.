# Assignment 8: SQL Analytical Queries & Views


## Step 1: Create and Populate Products Table

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Price DECIMAL(10,2),
    QuantitySold INT,
    Category VARCHAR(50)
);

INSERT INTO Products (ProductID, ProductName, Price, QuantitySold, Category) VALUES
(1, 'Laptop', 800.00, 5, 'Electronics'),
(2, 'Smartphone', 600.00, 10, 'Electronics'),
(3, 'Desk Chair', 120.00, 15, 'Furniture'),
(4, 'Table', 200.00, 8, 'Furniture'),
(5, 'Notebook', 5.00, 20, 'Stationery'),
(6, 'Pen', 2.00, 50, 'Stationery');


## Step 2: SQL Query Tasks

### Query a) Above-Average Price
**Corrected SQL:**
```sql
SELECT * FROM Products
WHERE Price > (
    SELECT AVG(Price) FROM Products
);
```

**Expected Result:**
| ProductID | ProductName | Price  | QuantitySold | Category    |
|-----------|-------------|--------|--------------|------------|
| 1         | Laptop      | 800.00 | 5            | Electronics|
| 2         | Smartphone  | 600.00 | 10           | Electronics|

**Calculation:** Average Price = (800 + 600 + 120 + 200 + 5 + 2) / 6 = 1727 / 6 â‰ˆ 287.83

### Query b) Most Expensive Product
**Corrected SQL (MySQL):**
```sql
SELECT ProductName, Price
FROM Products
ORDER BY Price DESC
LIMIT 1;
```

**SQL Server Alternative:**
```sql
SELECT TOP 1 ProductName, Price
FROM Products
ORDER BY Price DESC;
```

**Expected Result:**
| ProductName | Price  |
|-------------|--------|
| Laptop      | 800.00 |

### Query c) Category Counts (Using Subquery)
**Corrected SQL:**
```sql
SELECT DISTINCT Category,
    (SELECT COUNT(*)
     FROM Products P2
     WHERE P2.Category = P1.Category) AS ProductCount
FROM Products P1;
```

**Expected Result:**
| Category    | ProductCount |
|-------------|--------------|
| Electronics | 2            |
| Furniture   | 2            |
| Stationery  | 2            |

### Query d) Below-Average Sales
**Corrected SQL:**
```sql
SELECT * FROM Products
WHERE QuantitySold < (
    SELECT AVG(QuantitySold) FROM Products
);
```

**Expected Result:**
| ProductID | ProductName | Price  | QuantitySold | Category    |
|-----------|-------------|--------|--------------|------------|
| 1         | Laptop      | 800.00 | 5            | Electronics|
| 2         | Smartphone  | 600.00 | 10           | Electronics|
| 4         | Table       | 200.00 | 8            | Furniture  |

**Calculation:** Average QuantitySold = (5 + 10 + 15 + 8 + 20 + 50) / 6 = 108 / 6 = 18

### Query e) Electronics View
**Corrected SQL:**
```sql
CREATE VIEW ElectronicsView AS
SELECT * FROM Products
WHERE Category = 'Electronics';
```

**To verify the view:**
```sql
SELECT * FROM ElectronicsView;
```

**Expected Result:**
| ProductID | ProductName | Price  | QuantitySold | Category    |
|-----------|-------------|--------|--------------|------------|
| 1         | Laptop      | 800.00 | 5            | Electronics|
| 2         | Smartphone  | 600.00 | 10           | Electronics|

## Complete SQL Script for Submission:

```sql
-- Create Products Table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Price DECIMAL(10,2),
    QuantitySold INT,
    Category VARCHAR(50)
);

-- Insert Sample Data
INSERT INTO Products (ProductID, ProductName, Price, QuantitySold, Category) VALUES
(1, 'Laptop', 800.00, 5, 'Electronics'),
(2, 'Smartphone', 600.00, 10, 'Electronics'),
(3, 'Desk Chair', 120.00, 15, 'Furniture'),
(4, 'Table', 200.00, 8, 'Furniture'),
(5, 'Notebook', 5.00, 20, 'Stationery'),
(6, 'Pen', 2.00, 50, 'Stationery');

-- Query a: Above-Average Price
SELECT * FROM Products
WHERE Price > (
    SELECT AVG(Price) FROM Products
);

-- Query b: Most Expensive Product (MySQL version)
SELECT ProductName, Price
FROM Products
ORDER BY Price DESC
LIMIT 1;

-- Query c: Category Counts
SELECT DISTINCT Category,
    (SELECT COUNT(*)
     FROM Products P2
     WHERE P2.Category = P1.Category) AS ProductCount
FROM Products P1;

-- Query d: Below-Average Sales
SELECT * FROM Products
WHERE QuantitySold < (
    SELECT AVG(QuantitySold) FROM Products
);

-- Query e: Electronics View
CREATE VIEW ElectronicsView AS
SELECT * FROM Products
WHERE Category = 'Electronics';

-- Verify the view
SELECT * FROM Electronicsview;